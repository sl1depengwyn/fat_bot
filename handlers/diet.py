import asyncio
import sqlite3

import requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bs4 import BeautifulSoup
from telegraph import Telegraph
from telegraph.utils import html_to_content

import config
from SQLighter import SQLighter
from misc import dp, bot


class Diet(StatesGroup):
    initial = State()
    waiting_for_start = State()
    waiting_for_dietgoal = State()
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_desired_weight = State()
    waiting_for_diet = State()
    done = State()


genders = {"–∂–µ–Ω—Å–∫–∏–π": "f",
           "–º—É–∂—Å–∫–æ–π": "m"}

dietgoals = {"–ø–æ—Ö—É–¥–µ–Ω–∏–µ": "losing",
             "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ": "support",
             "–Ω–∞–±–æ—Ä –≤–µ—Å–∞": "increase"}


async def get_diet_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('‚úÖ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç')
    return keyboard


async def make_keyboard(d):
    inline_btns = []
    for item in d.keys():
        inline_btns.append(types.InlineKeyboardButton(item.upper(), callback_data=d[item]))
    inline_kb = types.InlineKeyboardMarkup()
    for btn in inline_btns:
        inline_kb.add(btn)
    return inline_kb


async def scheduled_message(message, text, bot):
    await asyncio.sleep(30 * 60)
    await message.answer(text.format(bot))


@dp.message_handler(commands=['start'], state='*')
async def initial_step(message: types.Message):
    if Diet.initial:
        try:
            db = SQLighter(config.db)
            db.add_line(message.from_user.id)
            db.close()
        except sqlite3.IntegrityError:
            pass
    inline_btn = types.InlineKeyboardButton('–ü–û–õ–£–ß–ò–¢–¨ –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø ‚§µ', callback_data='get_diet')
    inline_kb = types.InlineKeyboardMarkup().add(inline_btn)
    await message.answer('''–ü—Ä–∏–≤–µ—Ç, {} üëã

–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–º–Ω–æ–π –¥–∏–µ—Ç–µ üçè   

–ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ø –°–ì–ï–ù–ï–†–ò–†–£–Æ –¥–ª—è —Ç–µ–±—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç'''.format(
        message.from_user.first_name), reply_markup=inline_kb)
    await Diet.waiting_for_start.set()


@dp.callback_query_handler(lambda c: c.data == 'get_diet', state=Diet.waiting_for_start)
async def process_callback_initial_button(callback_query: types.CallbackQuery):
    return await diet_step_start(callback_query.message)


@dp.message_handler(lambda m: m.text == '‚úÖ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç', state='*')
async def diet_step_start(message: types.Message):
    await message.answer("1Ô∏è‚É£–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:", reply_markup=await make_keyboard(dietgoals))
    await Diet.waiting_for_dietgoal.set()


@dp.callback_query_handler(lambda c: c.data in dietgoals.values(), state=Diet.waiting_for_dietgoal)
async def process_callback_button_for_dietgoal(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(dietgoal=callback_query.data)
    await callback_query.message.answer("2Ô∏è‚É£–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=await make_keyboard(genders))
    await Diet.waiting_for_gender.set()


@dp.message_handler(state=Diet.waiting_for_dietgoal, content_types=types.ContentTypes.TEXT)
async def diet_step_dietgoal(message: types.Message, state: FSMContext):
    if message.text.lower() not in dietgoals.keys():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ",
                            reply_markup=await make_keyboard(dietgoals))
        return
    await state.update_data(dietgoal=dietgoals[message.text.lower()])
    await message.answer("2Ô∏è‚É£–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=await make_keyboard(genders))
    await Diet.waiting_for_gender.set()


@dp.callback_query_handler(lambda c: c.data in genders.values(), state=Diet.waiting_for_gender)
async def process_callback_button_for_gender(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(gender=callback_query.data)
    await callback_query.message.answer("3Ô∏è‚É£–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    await Diet.waiting_for_age.set()


@dp.message_handler(state=Diet.waiting_for_gender, content_types=types.ContentTypes.TEXT)
async def diet_step_gender(message: types.Message, state: FSMContext):
    if message.text.lower() not in genders.keys():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ",
                            reply_markup=await make_keyboard(genders))
        return
    await state.update_data(gender=dietgoals[message.text.lower()])
    await message.answer("3Ô∏è‚É£–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    await Diet.waiting_for_age.set()


@dp.message_handler(state=Diet.waiting_for_age, content_types=types.ContentTypes.TEXT)
async def diet_step_height(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or message.text.isdigit() and int(message.text) < 0:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
        return
    await state.update_data(age=message.text)
    await message.answer("4Ô∏è‚É£–†–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    await Diet.waiting_for_height.set()


@dp.message_handler(state=Diet.waiting_for_height, content_types=types.ContentTypes.TEXT)
async def diet_step_current_weight(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or message.text.isdigit() and int(message.text) < 0:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ä–æ—Å—Ç:")
        return
    await state.update_data(height=message.text)
    await message.answer("5Ô∏è‚É£–ú–∞—Å—Å–∞ —Ç–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, –∫–≥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    await Diet.waiting_for_weight.set()


@dp.message_handler(state=Diet.waiting_for_weight, content_types=types.ContentTypes.TEXT)
async def diet_step_desired_weight(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or message.text.isdigit() and int(message.text) < 0:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å:")
        return
    await state.update_data(currentWeight=message.text)
    if (await state.get_data())['dietgoal'] != 'support':
        await message.answer("6Ô∏è‚É£–ú–∞—Å—Å–∞ —Ç–µ–ª–∞ –∂–µ–ª–∞–µ–º–∞—è, –∫–≥ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
        await Diet.waiting_for_desired_weight.set()
    else:
        await Diet.waiting_for_desired_weight.set()
        await diet_step_final(message, state)


@dp.message_handler(state=Diet.waiting_for_desired_weight, content_types=types.ContentTypes.TEXT)
async def diet_step_final(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or message.text.isdigit() and int(message.text) < 0:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å:")
        return
    await state.update_data(desiredWeight=message.text)
    await Diet.done.set()

    user_data = await state.get_data()
    user_data['saturation_speed'] = 10
    user_data['pregnant'] = 'n'
    user_data['breastFeeding'] = 'n'
    user_data['email'] = 'bot@bot.bot'
    user_data['form_version'] = 'v2'
    user_data['olddietfile'] = ''
    user_data['drugs'] = ''
    user_data['forbiddenFood'] = ''
    user_data['ration'] = ''
    user_data['activity'] = ''
    user_data['diet_text'] = ''
    user_data['diet_raw_text'] = ''
    user_data['disease'] = ''
    user_data['calories'] = ''
    user_data['mass_time'] = ''
    user_data['date_to_goal'] = ''
    user_data['factors'] = ''
    user_data['episodes_of_something'] = ''
    user_data['physical_activity'] = ''
    user_data['do_you_want_special_fitfood'] = ''
    user_data['time_of_phis_training'] = ''
    user_data['pref_products'] = ''
    await message.answer('–ù–∞—à –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–ª—è –í–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è üçΩ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.', reply_markup=await get_diet_keyboard())

    await bot.send_chat_action(message.chat.id, 'typing')

    r = requests.post(config.backend_url + "/dietform/fillproductionform_api/", user_data)

    if r.status_code == 200:
        data = requests.get(config.backend_url + r.json()['url'])

        telegraph_user = Telegraph().create_account(message.from_user.first_name)
        telegraph = Telegraph(telegraph_user.access_token)

        soup = BeautifulSoup(data.text, 'html.parser')
        blocks = soup.find_all('div', {'class': 'row w-row'})
        days = [{'0': '0'}] * 7

        for block in blocks:
            html_content = ''

            day_number = block.find('span', {'class': 'day_number'}).text
            html_content += f'<h3>–î–µ–Ω—å {day_number.strip()}</h3>\n'

            daily_fppcal_vals = block.find_all('div', {'class': 'daily-fpccal-value'})
            html_content += f'<p>–ë–µ–ª–∫–∏: {daily_fppcal_vals[0].text.strip()}\n'
            html_content += f'–ñ–∏—Ä—ã: {daily_fppcal_vals[1].text.strip()}\n'
            html_content += f'–£–≥–ª–µ–≤–æ–¥—ã: {daily_fppcal_vals[2].text.strip()}\n'
            html_content += f'–ö–∞–ª–æ—Ä–∏–∏: {daily_fppcal_vals[3].text.strip()}</p>\n\n'

            daily_product_list = block.find_all('p', {'class': 'daily-products-list'})
            html_content += '<p><b>–ü—Ä–æ–¥—É–∫—Ç—ã:</b></p>\n<p>'
            for prod in daily_product_list:
                html_content += prod.text.strip() + '\n'

            html_content += '</p>\n'

            rations = block.find_all('div', {'class': 'ration-div2'})
            for ration in rations:
                html_content += f'<h4>{ration.find("h2", {"class": "ration-name"}).text.strip()}</h4>\n'

                fppcal_vals = ration.find_all('div', {'class': 'fpccal-value'})
                html_content += f'<p>–ë–µ–ª–∫–∏: {fppcal_vals[0].text.strip()}\n' \
                                f'–ñ–∏—Ä—ã: {fppcal_vals[1].text.strip()}\n' \
                                f'–£–≥–ª–µ–≤–æ–¥—ã: {fppcal_vals[2].text.strip()}\n' \
                                f'–ö–∞–ª–æ—Ä–∏–∏: {fppcal_vals[3].text.strip()}</p>\n\n'

                html_content += f'<p><b>{ration.find("div", {"class": "meal-name"})}</b></p>\n<p>'

                products = ration.find_all('div', {'class': 'product-div'})
                for product in products:
                    name = product.find('div', {'class': 'product-name'})
                    weight = product.find('div', {'class': 'product-weight'})

                    html_content += f'{name.text.strip()} <b>{weight.text.strip()}</b>\n'

            html_content += '</p><br>'

            page = telegraph.create_page(title=f'–†–∞—Ü–∏–æ–Ω ({day_number})', content=html_to_content(html_content))

            day = {'url': page.url,
                   'day_number': day_number,
                   'plate': f'–ü–ª–∞–Ω –Ω–∞ {day_number}-–π –¥–µ–Ω—å'}

            days[int(day_number) - 1] = day

        day_keyboard = {}
        for day in days:
            day_keyboard[day['plate']] = 'get_d' + '-_-' + day['day_number'] + '-_-' + day['url']
        await message.answer('–ì–æ—Ç–æ–≤–æ!üëå ', reply_markup=await get_diet_keyboard())
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ‚¨áÔ∏è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Ü–∏–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è:', reply_markup=await make_keyboard(day_keyboard))

        await scheduled_message(message, '''–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã: 
        ‚úÖ–ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫ —Ä–∞—Ü–∏–æ–Ω—É
        ‚úÖ—É–∑–Ω–∞—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
        ‚úÖ—á–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
        ‚úÖ–∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å, –∞ –∫–∞–∫–∏–µ –µ—Å—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        ‚úÖ–∫–∞–∫ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞—Ç—å –º–µ–Ω—é —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏...
    
        –ü–ï–†–ï–•–û–î–ò–¢–ï –í –ù–ê–®–ï–ì–û –û–°–ù–û–í–ù–û–ì–û –ü–û–ú–û–©–ù–ò–ö–ê ‚û°Ô∏è  {}''', config.redirect_bot)
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ü§∑‚Äç‚ôÄÔ∏è', reply_markup=await get_diet_keyboard())


@dp.callback_query_handler(lambda c: c.data.split('-_-')[0] == 'get_d', state=Diet.done)
async def process_callback_initial_button(callback_query: types.CallbackQuery):
    callback_data = callback_query.data.split('-_-')
    await callback_query.message.edit_text(f'<a href="{callback_data[2]}">–ü–ª–∞–Ω</a> –Ω–∞ {callback_data[1]}-–π –¥–µ–Ω—å',
                                           parse_mode='HTML', reply_markup=callback_query.message.reply_markup)
